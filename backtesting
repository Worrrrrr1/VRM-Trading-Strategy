//@version=5
// 根据vwma上下轨，结合rsi+1/2mfi参数的上下轨过滤，确定开平仓位置

// 策略默认设置======={
strategy("VRM Strategy", 
   overlay=true, // 允许策略叠加在图表上
   pyramiding = 4,  //最多加仓次数@momo
   default_qty_type = strategy.cash,  // 设置默认的交易量类型为现金
   initial_capital = 10000,  // 设置初始资本
   commission_type = strategy.commission.percent,  // 设置佣金类型为百分比
   commission_value = 0.1,  // 设置交易佣金的百分比值
   default_qty_value = 100  // 设置默认交易量的大小@momo
   )

// 自定义颜色
color gray = color.rgb(128, 223, 236, 61)
color white = color.rgb(210, 210, 210)
color red = color.rgb(128, 49, 49)
color yellow = color.rgb(170, 140, 40)
color green = color.rgb(26, 155, 45, 30)

// 参数设置分组
string strategy_group = "策略设置"
string sltp_group = "SL&TP设置"
string dca_group = "DCA设置"
string visual_group = "视觉设置"

// 策略设置
float ChangePercentage = input.float(1.4, 'VRM系数(0-5)', group=strategy_group, tooltip="可以理解为价格波动，时间周期越短，数字应该越小")
float below = input(40, "下轨阈值(0-150)", group=strategy_group, tooltip="数字越小,买入机会越小。这里参数大体是RSI+1/2MFI,建议值是30+10=40")
float above = input(110, "上轨阈值(0-150)", group=strategy_group, tooltip="数字越大，卖出机会越小.这里参数大体是RSI+1/2MFI,建议值是70+40=110")

// DCA设置
float addPercentage = input.float(2.0, "DCA 加仓百分比 (%)", group=dca_group, tooltip="价格下跌达到此比例时触发DCA加仓") / 100
float baseOrderAmount = input.float(1000, "基础订单金额 ($)", group=dca_group)
float dcaMultiplier = input.float(1.5, "DCA 倍数", group=dca_group, tooltip="对仓位大小进行倍增")
int numberOfDCAOrders = input.int(4, "DCA 订单数量", group=dca_group, tooltip="How Many DCA orders Do you want ?") + 1
bool DCAType = input.string("Volume Multiply","DCA类型",options = ["Volume Multiply","Base Multiply"],group = dca_group) == "Volume Multiply"

// SL&TP设置
bool minimumTakeProfitEnabled = input.bool(true, "启用止盈%", group=sltp_group) 
float takeProfitPercent = input.float(2.0, "止盈 (%)", group=sltp_group) / 100
float stopLossPercent = input.float(2.0, "止损 (%)", group=sltp_group) /100

// 视觉设置
bool displayDealLines = input(true, "是否显示交易线", group=visual_group)

// 初始化设置
var int socounter = 0  // 加仓计数器
var int dealcount = 0  // 交易计数器
var int glb_dealstart_bar_time = na  // 全局交易开始时间
var float lastDCAPrice = 0.0  // 记录上次 DCA 加仓的价格
var float totalCapitalUsed = 0.0  // 记录总共投入的资金
//=======}


//1核心交易开仓逻辑======={
// 计算成交量加权移动平均（Volume Weighted Moving Average）
float core = ta.vwma(hlc3, 14)
float vwma_above = core * (1 + (ChangePercentage / 100))
float vwma_below = core * (1 - (ChangePercentage / 100))


// 利用RSI和MFI指标计算rsi_mfi交易信号
float up = ta.rma(math.max(ta.change(close), 0), 7) //rma = ema
float down = ta.rma(-math.min(ta.change(close), 0), 7)
float rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
float mfi = ta.mfi(hlc3, 7)
float rsi_mfi = math.abs(rsi + mfi / 2)

// 生成交易信号
long = (low <= vwma_below) and (rsi_mfi < below)
short = (high >= vwma_above) and (rsi_mfi > above)
//=======}


// 策略相关功能函数======={
// 计算加仓偏移价格的函数（止损和加仓应该是两个函数，止损是总投入资金偏移量<=2%，加仓是加权平均价格偏移量<=2%，该处写法为加仓偏移量）
calcDCAOffsetPrice() =>
    if strategy.position_size > 0 
        math.round((strategy.position_avg_price - addPercentage  / 100 * strategy.position_avg_price) / syminfo.mintick) * syminfo.mintick
    else if strategy.position_size < 0 
        math.round((strategy.position_avg_price + addPercentage  / 100 * strategy.position_avg_price) / syminfo.mintick) * syminfo.mintick
    else
        na

// 计算自上次交易以来价格变化百分比
calcPriceChangeFromLastDeal() =>
    lastDealPrice = strategy.opentrades.entry_price(strategy.opentrades - 1)
    math.abs((close - lastDealPrice) / close * 100)

// 计算止损订单资金总额
calcCapitalForStopOrders() =>
    float totalCapital = 0.0
    initialSO = baseOrderAmount * dcaMultiplier
    for i = 1 to numberOfDCAOrders - 1
        orderSize = initialSO * math.pow(dcaMultiplier, i - 1)
        totalCapital += orderSize
    totalCapital + baseOrderAmount

// 计算特定批次的订单大小
calculateOrderSize(orderNumber) =>
    baseOrderAmount * math.pow(dcaMultiplier, orderNumber)

// 计算sl&tp价格
calcStopLossPrice() =>
    strategy.opentrades * strategy.position_avg_price * (1 - stopLossPercent)
calcTakeProfitPrice() =>
    close > (strategy.position_avg_price * (1 + takeProfitPercent))

// 定义加仓条件
WhenAddCondition() =>
    calcPriceChangeFromLastDeal() > addPercentage and close < calcStopLossPrice()

//=======}



// 2加仓平仓逻辑======={
// 执行交易的函数，增加默认qty参数值
executeTrade(type, comment, qty = 0) =>
    var int trade_time = na
    if type == "open" or type == "add"
        if qty != 0
            strategy.entry("LONG", strategy.long, comment=comment, qty=qty)
            alert(type == "open" ? "新做多交易 {{ticker}}" : "新DCA交易 {{ticker}}", freq=alert.freq_once_per_bar_close)
            if type == "open"
                trade_time := time  // 返回开仓时间
            else
                trade_time := time  // 返回当前时间
    if type == "close"
        strategy.close("LONG", comment=" ")
        alert("交易平仓 {{ticker}}", freq=alert.freq_once_per_bar_close)
        trade_time := time // 返回当前时间
    trade_time

// 时间主逻辑
var int open_time = na
var int close_time = na

// Long 开仓逻辑
if long and strategy.opentrades == 0 
    open_time := executeTrade("open", "D # " + str.tostring(strategy.closedtrades + 1), baseOrderAmount / close)
    if not na(open_time)
        glb_dealstart_bar_time := open_time
        lastDCAPrice := strategy.position_avg_price  // 在开仓时初始化 lastDCAPrice
        socounter := socounter + 1

// Long 加仓逻辑
if long and strategy.opentrades > 0 and strategy.opentrades < numberOfDCAOrders 
    priceChange = calcPriceChangeFromLastDeal()
    if WhenAddCondition()
        qty = DCAType ? (strategy.position_size * dcaMultiplier) : calculateOrderSize(socounter) / close
        executeTrade("add", "SO # " + str.tostring(strategy.opentrades), qty)
        lastDCAPrice := close
        socounter := socounter + 1

// 盈亏标签显示
plotPNLLabel() =>
    message = ""
    message += "PNL: " + str.tostring(math.round(strategy.closedtrades.profit(strategy.closedtrades - 1), 2)) + ' ' + str.tostring(syminfo.currency) + '\n'
    message += "PNL%: " + str.tostring(math.round(strategy.closedtrades.profit_percent(strategy.closedtrades - 1), 2)) + " %"
    label.new(bar_index + 1, y= high * 1.01, text=message, yloc=yloc.price, style=label.style_label_lower_left, textcolor=white, textalign=text.align_left, color=yellow)
    
// Long 平仓逻辑
if strategy.position_size > 0 and short and (minimumTakeProfitEnabled ? calcTakeProfitPrice() : true) 
    close_time := executeTrade("close", "")
    if not na(close_time)
        plotPNLLabel()
//=======}


// 3止盈止损逻辑======={

//=======}



// 绘制交易信号，阈值线和盈亏标签======={
// VMMA上轨和下轨显示
hp = plot(vwma_above, "VWMA上轨", color=red, editable=false)
lp = plot(vwma_below, "VWMA下轨", color=green, editable=false)
ap = plot(core,"VWMA价", color = white, editable=false)

// 买入和平仓信号
plotshape(series=long, title="买入信号", style=shape.labelup, location=location.belowbar, color=green, size=size.tiny, text="buy", textcolor=white, editable=false)
plotshape(series=short, title="平仓信号", style=shape.labeldown, location=location.abovebar, color=red, size=size.tiny, text="close", textcolor=white, editable=false)


// 绘制平均、止损和止盈价格
avgPriceLine = plot(displayDealLines ? strategy.position_avg_price : na, "持仓成本", color=white, editable=false)
stopLossLine = plot(displayDealLines ? strategy.position_avg_price * (1 - stopLossPercent) : na, "止损线", color=yellow, editable=false)
takeProfitLine = plot(displayDealLines ? strategy.position_avg_price * (1 + takeProfitPercent) : na, "止盈线", color=yellow, editable=false)


//=======}


//右上角交易状态======={
// 定义表格位置
table_position() => position.top_right

// 查看是否已开仓
isOpenTrade() =>
    strategy.opentrades > 0 ? 1 : 0

// 计算当前持仓的盈亏百分比
calcCurrentPNLPercentage() =>
    (close - strategy.position_avg_price) / close * 100

// 创建信息展示表格
var summary_table = table.new(position = table_position(), columns = 2, rows = 4, frame_color = color.rgb(101, 101, 101, 80), frame_width = 2, border_width = 2)

// 更新表格单元格信息
table_cell(_table, _row, in1, in2) =>
    table.cell(_table, 0, _row, in1, text_color = white, bgcolor = color.rgb(101, 101, 101, 80), text_size = size.small )
    table.cell(_table, 1, _row, str.tostring(in2), text_color = white, bgcolor = color.rgb(101, 101, 101, 80), text_size = size.small )

// 开仓状态和盈亏信息
statusOpen() =>
    if isOpenTrade()
        "开仓状态\n------\n" + syminfo.currency + " : $" + str.tostring(math.round(strategy.openprofit, 2)) + "\n------\n% : " + str.tostring(math.round(calcCurrentPNLPercentage(), 2)) + " %"
    else
        "未开仓"

// 填充表格函数
fillTable(summary_table) =>
    // 添加表头并设置样式
    table.cell(summary_table, 0, 0, text='VRM Strategy [Alin]', text_color=white, bgcolor=color.rgb(101, 101, 101, 80))
    table.merge_cells(summary_table, 0, 0, 1, 0)

    // 交易状态
    table.cell(summary_table, 0, 1, text = '交易状态',bgcolor = color.rgb(101, 101, 101, 80), text_color = white, text_size = size.small)
    table.cell(summary_table, 1, 1, text = statusOpen(), bgcolor = color.rgb(101, 101, 101, 80), text_color = white, text_size = size.small)

    // 所需资本
    row = 2
    requiredCapital = calcCapitalForStopOrders()
    table.cell(summary_table, 0, row, text = "所需资本: " + str.tostring(requiredCapital), bgcolor = color.rgb(101, 101, 101, 80), text_color = white, text_size = size.small)

    // 总盈亏
    table.cell(summary_table, 0, row + 1, text = "总盈亏: " + str.tostring(math.round(strategy.netprofit,2 )), bgcolor = color.rgb(101, 101, 101, 80), text_color = white, text_size = size.small)

// 随着bar更新table
if barstate.isconfirmed
    table.clear(summary_table, 0, 0, 1, 3)
    fillTable(summary_table)
//=======}