//@version=5
// 根据vwma上下轨，结合rsi+1/2mfi参数的上下轨过滤，确定开平仓位置

// 策略默认设置======={
strategy("VRM Strategy", 
   overlay=true, // 允许策略叠加在图表上
   pyramiding = 4,  //最多加仓次数@momo
   default_qty_type = strategy.cash,  // 设置默认的交易量类型为现金
   initial_capital = 10000,  // 设置初始资本
   commission_type = strategy.commission.percent,  // 设置佣金类型为百分比
   commission_value = 0.1,  // 设置交易佣金的百分比值
   default_qty_value = 1000  // 设置默认交易金额
   )

// 自定义颜色
color gray = color.rgb(128, 223, 236, 61)
color white = color.rgb(210, 210, 210)
color red = color.rgb(128, 49, 49)
color yellow = color.rgb(170, 140, 40)
color green = color.rgb(26, 155, 45, 30)

// 参数设置分组
string strategy_group = "策略设置"
string sltp_group = "SL&TP设置"
string dca_group = "DCA设置"
string visual_group = "视觉设置"

// 策略设置
float ChangePercentage = input.float(1.4, 'VRM系数(0-5)', group=strategy_group, tooltip="可以理解为价格波动，时间周期越短，数字应该越小")
float below = input(40, "下轨阈值(0-150)", group=strategy_group, tooltip="数字越小,买入机会越小。这里参数大体是RSI+1/2MFI,建议值是30+10=40")
float above = input(110, "上轨阈值(0-150)", group=strategy_group, tooltip="数字越大，卖出机会越小.这里参数大体是RSI+1/2MFI,建议值是70+40=110")

// DCA设置
float addPercent = input.float(2.0, "DCA 加仓触发百分比 (%)", group=dca_group, tooltip="价格下跌达到此比例时触发DCA加仓") / 100
float baseOrderAmount = input.float(1000, "基础订单金额 ($)", group=dca_group)
float dcaMultiplier = input.float(1.5, "DCA 倍数", group=dca_group, tooltip="对仓位大小进行倍增")
int numberOfDCAOrders = input.int(4, "DCA 订单数量", group=dca_group, tooltip="How Many DCA orders Do you want ?") + 1
bool DCAType = input.string("Volume Multiply","DCA类型",options = ["Volume Multiply","Base Multiply"],group = dca_group) == "Volume Multiply"

// SL&TP设置
bool minimumTakeProfitEnabled = input.bool(true, "启用止盈%", group=sltp_group) 
float takeProfitPercent = input.float(2.0, "止盈 (%)", group=sltp_group) / 100
float stopLossPercent = input.float(2.0, "止损 (%)", group=sltp_group) /100

// 视觉设置
bool displayDealLines = input(true, "是否显示交易线", group=visual_group)

// 初始化设置
var int socounter = 0  // 加仓计数器
var int dealcount = 0  // 交易计数器
var float lastDCAPrice = 0.0  // 记录上次 DCA 加仓的价格
var float totalCapitalUsed = 0.0  // 记录总共投入的资金
//=======}

// 1 交易信号 ======={

// 成交量加权移动平均（Volume Weighted Moving Average）
float core = ta.vwma(hlc3, 14)
float vwma_above = core * (1 + (ChangePercentage / 100))
float vwma_below = core * (1 - (ChangePercentage / 100))

// 计算rsi_mfi交易信号
float up = ta.rma(math.max(ta.change(close), 0), 7) //rma = ema
float down = ta.rma(-math.min(ta.change(close), 0), 7)
float rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
float mfi = ta.mfi(hlc3, 7)
float rsi_mfi = math.abs(rsi + mfi / 2)

// 生成交易信号
bool long = (low <= vwma_below) and (rsi_mfi < below)
bool short = (high >= vwma_above) and (rsi_mfi > above)

// 绘制VWMA、RSI_MFI、信号
plot(vwma_above, "VWMA上轨", color=red, editable=false)
plot(vwma_below, "VWMA下轨", color=green, editable=false)
plotshape(series=long and strategy.opentrades == 0, location=location.belowbar, color=color.green, style=shape.labelup, text="LONG", textcolor= color.white)
plotshape(series=short and strategy.opentrades > 0, location=location.abovebar, color=color.red, style=shape.labeldown, text="SHORT", textcolor= color.white)

//=======}

// 2 开、加仓======={
// 1：根据信号决定持仓
if long and strategy.opentrades == 0 
    strategy.entry(id="LONG", direction=strategy.long, comment = "LongOpen # " + str.tostring(dealcount), qty = baseOrderAmount / close)
    lastDCAPrice := baseOrderAmount
    dealcount := dealcount + 1
    alert("新做多交易 {{ticker}}", freq=alert.freq_once_per_bar_close)

// 2：DCA加仓
if (long and 
     strategy.opentrades > 0 and 
     strategy.opentrades < numberOfDCAOrders and 
     close <= strategy.opentrades.entry_price(strategy.opentrades - 1) * (1-addPercent))
    lastDCAPrice := lastDCAPrice * dcaMultiplier
    strategy.entry(id="LONG", direction=strategy.long, comment = "LongAdd # " + str.tostring(dealcount), qty = lastDCAPrice / close)
    socounter := socounter + 1
    alert("新DCA加仓 {{ticker}}", freq=alert.freq_once_per_bar_close)

// 3：平仓 ======={
// 3.1 平仓信号检查
checkShortCondition() =>
    if short and close > strategy.position_avg_price * (1 + takeProfitPercent)
        strategy.close("LONG", comment="LongClose")
        alert("信号平仓 {{ticker}}", freq=alert.freq_once_per_bar_close)

// 3.2 止盈止损检查
checkTakeProfit() =>
    if strategy.openprofit > 0
        if strategy.openprofit >= strategy.equity * takeProfitPercent
            strategy.close(id="LONG", comment="Take Profit")
            alert("止盈平仓 {{ticker}}", freq=alert.freq_once_per_bar_close)

checkStopLoss() =>
    if strategy.openprofit < 0
        if strategy.openprofit <= strategy.equity * -stopLossPercent
            strategy.close(id="LONG", comment="Stop Loss")
            alert("止损平仓 {{ticker}}", freq=alert.freq_once_per_bar_close)

if (strategy.opentrades > 0)
    checkShortCondition()
    checkTakeProfit()
    checkStopLoss()

// 绘制持仓成本、add加仓信号价格
avgPriceLine = plot(displayDealLines ? strategy.position_avg_price : na, "持仓成本", color=white, style=plot.style_linebr, editable=false)
addTopLine = plot(displayDealLines ?  strategy.position_avg_price * (1 + stopLossPercent) : na, "add上线", color=yellow, style=plot.style_linebr, editable=false)
addDownLine = plot(displayDealLines ? strategy.position_avg_price * (1 - takeProfitPercent): na, "add下线", color=yellow, style=plot.style_linebr, editable=false)
//todo：止盈止损


//右上角交易状态======={
// 定义表格位置
table_position() => position.top_right

// 查看是否已开仓
isOpenTrade() =>
    strategy.opentrades > 0 ? 1 : 0

// 计算当前持仓的盈亏百分比
calcCurrentPNLPercentage() =>
    (close - strategy.position_avg_price) / close * 100

// 创建信息展示表格
var summary_table = table.new(position = table_position(), columns = 2, rows = 4, frame_color = color.rgb(101, 101, 101, 80), frame_width = 2, border_width = 2)

// 更新表格单元格信息
table_cell(_table, _row, in1, in2) =>
    table.cell(_table, 0, _row, in1, text_color = white, bgcolor = color.rgb(101, 101, 101, 80), text_size = size.small )
    table.cell(_table, 1, _row, str.tostring(in2), text_color = white, bgcolor = color.rgb(101, 101, 101, 80), text_size = size.small )

// 开仓状态和盈亏信息
statusOpen() =>
    if isOpenTrade()
        "开仓状态\n------\n" + syminfo.currency + " : $" + str.tostring(math.round(strategy.openprofit, 2)) + "\n------\n% : " + str.tostring(math.round(calcCurrentPNLPercentage(), 2)) + " %"
    else
        "未开仓"

// 填充表格函数
fillTable(summary_table) =>
    // 添加表头并设置样式
    table.cell(summary_table, 0, 0, text='VRM Strategy [Alin]', text_color=white, bgcolor=color.rgb(101, 101, 101, 80))
    table.merge_cells(summary_table, 0, 0, 1, 0)

    // 交易状态
    table.cell(summary_table, 0, 1, text = '交易状态',bgcolor = color.rgb(101, 101, 101, 80), text_color = white, text_size = size.small)
    table.cell(summary_table, 1, 1, text = statusOpen(), bgcolor = color.rgb(101, 101, 101, 80), text_color = white, text_size = size.small)

    // 所需资本 （不知道什么意思）
    row = 2
    table.cell(summary_table, 0, row, text = "所需资本: " + str.tostring(0), bgcolor = color.rgb(101, 101, 101, 80), text_color = white, text_size = size.small)

    // 总盈亏
    table.cell(summary_table, 0, row + 1, text = "总盈亏: " + str.tostring(math.round(strategy.netprofit,2 )), bgcolor = color.rgb(101, 101, 101, 80), text_color = white, text_size = size.small)

// 随着bar更新table
if barstate.isconfirmed
    table.clear(summary_table, 0, 0, 1, 3)
    fillTable(summary_table)
//=======}